{"message":"mismatched types","code":{"code":"E0308","explanation":"EXPLENATION"},"level":"error","spans":[{"file_name":"<std macros>","byte_start":23234,"byte_end":23245,"line_start":5,"line_end":5,"column_start":22,"column_end":33,"is_primary":true,"text":[{"text":"if ! ( * left_val == * right_val ) {","highlight_start":22,"highlight_end":33}],"label":"expected enum `std::option::Option`, found &{integer}","suggested_replacement":null,"expansion":{"span":{"file_name":"src/test.rs","byte_start":20203,"byte_end":20234,"line_start":331,"line_end":331,"column_start":2,"column_end":33,"is_primary":false,"text":[{"text":"\tassert_eq!(Some(&3_usize), &3);","highlight_start":2,"highlight_end":33}],"label":null,"suggested_replacement":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"<std macros>","byte_start":23108,"byte_end":23746,"line_start":1,"line_end":18,"column_start":1,"column_end":71,"is_primary":false,"text":[{"text":"( $ left : expr , $ right : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & $ left , & $ right ) {","highlight_start":1,"highlight_end":33},{"text":"( left_val , right_val )=> {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"\"assertion failed: `(left == right)` \\","highlight_start":1,"highlight_end":39},{"text":"                           (left: `{:?}`, right: `{:?}`)\"","highlight_start":1,"highlight_end":58},{"text":", left_val , right_val ) } } } } ) ; (","highlight_start":1,"highlight_end":39},{"text":"$ left : expr , $ right : expr , $ ( $ arg : tt ) * ) => (","highlight_start":1,"highlight_end":59},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & ( $ left ) , & ( $ right ) ) {","highlight_start":1,"highlight_end":41},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"\"assertion failed: `(left == right)` \\","highlight_start":1,"highlight_end":39},{"text":"                           (left: `{:?}`, right: `{:?}`): {}\"","highlight_start":1,"highlight_end":62},{"text":", left_val , right_val , format_args ! ( $ ( $ arg ) * ) ) } } } } ) ;","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"expansion":null}}}],"children":[{"message":"expected type `std::option::Option<&usize>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"   found type `&{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":null}